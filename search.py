import pandas as pd
from googlesearch import search
import requests
from bs4 import BeautifulSoup
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import sys

# Define your search query and number of results to scrape
query = "panda"
num_results = 10

# Perform the Google search and collect the results
print(f"Searching for '{query}'...")
results = list(search(query, num_results=num_results))
print(f"Found {len(results)} results.")

# Create lists to store data
urls = []
titles = []
snippets = []

# Extract title and snippet for each search result
print("Fetching data:")
for i, url in enumerate(results, 1):
    try:
        sys.stdout.write("\rProgress: [{:<50}] {}/{}".format('=' * int(i * 50 / len(results)), i, len(results)))
        sys.stdout.flush()
        
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        title = soup.title.string.strip() if soup.title else "N/A"
        
        snippet = soup.find('meta', attrs={'name': 'description'})
        snippet = snippet['content'].strip() if snippet and 'content' in snippet.attrs else "N/A"
        
        urls.append(url)
        titles.append(title)
        snippets.append(snippet)
    except Exception as e:
        print(f"\nError fetching data from {url}: {str(e)}")
        urls.append(url)
        titles.append("N/A")
        snippets.append("N/A")

# Create a DataFrame to store the results
df = pd.DataFrame({'URL': urls, 'Title': titles, 'Snippet': snippets, 'Position': range(1, len(results) + 1)})

# Generate a PDF report
pdf_report_filename = "search_results_report.pdf"
c = canvas.Canvas(pdf_report_filename, pagesize=letter)
c.drawString(100, 750, "Search Results Report")
c.drawString(100, 730, "Query: " + query)
c.drawString(100, 710, "Generated by Your Name")

table = df.values.tolist()
table.insert(0, df.columns.tolist())
table_data = [[str(cell) for cell in row] for row in table]

from reportlab.platypus import Table
from reportlab.platypus import TableStyle
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate

# Create a PDF document
pdf_filename = "search_results_report.pdf"
doc = SimpleDocTemplate(pdf_filename, pagesize=letter)

# Create a table from the DataFrame
data = [df.columns[:,].tolist()] + df.values.tolist()
table = Table(data)

# Style the table
style = TableStyle([('BACKGROUND', (0, 0), (-1, 0), (0.8, 0.8, 0.8)),
                    ('TEXTCOLOR', (0, 0), (-1, 0), (0, 0, 0)),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), (0.9, 0.9, 0.9)),
                    ('GRID', (0, 0), (-1, -1), 1, (0, 0, 0)),
                    ])

table.setStyle(style)

# Build and save the PDF report
elements = []
elements.append(table)
doc.build(elements)

print(f"\nPDF report generated and saved as {pdf_filename}")

# Save the data to a CSV file
csv_filename = "search_results_report.csv"
df.to_csv(csv_filename, index=False)

print(f"CSV report generated and saved as {csv_filename}")
